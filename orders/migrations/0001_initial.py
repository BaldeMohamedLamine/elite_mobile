# Generated by Django 5.1.1 on 2025-09-12 10:46

import django.utils.timezone
import orders.fields
import orders.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('action_type', models.CharField(choices=[('user_login', 'Connexion utilisateur'), ('user_logout', 'Déconnexion utilisateur'), ('user_register', 'Inscription utilisateur'), ('user_activate', 'Activation compte utilisateur'), ('user_deactivate', 'Désactivation compte utilisateur'), ('user_password_change', 'Changement mot de passe'), ('user_password_reset', 'Réinitialisation mot de passe'), ('order_create', 'Création commande'), ('order_update', 'Modification commande'), ('order_cancel', 'Annulation commande'), ('order_delete', 'Suppression commande'), ('payment_create', 'Création paiement'), ('payment_update', 'Modification paiement'), ('payment_refund', 'Remboursement'), ('product_create', 'Création produit'), ('product_update', 'Modification produit'), ('product_delete', 'Suppression produit'), ('category_create', 'Création catégorie'), ('category_update', 'Modification catégorie'), ('category_delete', 'Suppression catégorie'), ('support_ticket_create', 'Création ticket support'), ('support_ticket_update', 'Modification ticket support'), ('support_ticket_close', 'Fermeture ticket support'), ('admin_access', 'Accès admin'), ('manager_access', 'Accès gestionnaire'), ('data_export', 'Export données'), ('data_import', 'Import données'), ('system_config_change', 'Modification configuration système'), ('security_event', 'Événement sécurité'), ('other', 'Autre')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Faible'), ('medium', 'Moyen'), ('high', 'Élevé'), ('critical', 'Critique')], default='medium', max_length=10)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('request_path', models.CharField(blank=True, max_length=500, null=True)),
                ('request_method', models.CharField(blank=True, max_length=10, null=True)),
                ('object_type', models.CharField(blank=True, max_length=100, null=True)),
                ('object_id', models.CharField(blank=True, max_length=100, null=True)),
                ('old_values', models.JSONField(blank=True, null=True)),
                ('new_values', models.JSONField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('paid', 'Payée'), ('processing', 'En cours de traitement'), ('shipped', 'Expédiée'), ('delivered', 'Livrée'), ('cancelled', 'Annulée'), ('refunded', 'Remboursée')], default='pending', max_length=20)),
                ('payment_method', models.CharField(choices=[('orange_money', 'Orange Money'), ('visa', 'Carte Visa/Mastercard'), ('cash_on_delivery', 'Paiement à la livraison')], max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', 'En attente'), ('paid', 'Payé'), ('failed', 'Échoué'), ('refunded', 'Remboursé')], default='pending', max_length=20)),
                ('delivery_address', orders.fields.EncryptedTextField()),
                ('delivery_phone', orders.fields.EncryptedPhoneField(max_length=320, validators=[orders.validators.validate_phone_number])),
                ('delivery_notes', orders.fields.EncryptedTextField(blank=True, null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10, validators=[orders.validators.validate_positive_decimal])),
                ('delivery_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[orders.validators.validate_positive_decimal])),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[orders.validators.validate_positive_decimal])),
                ('paid_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[orders.validators.validate_positive_decimal])),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('cash_payment_confirmed', models.BooleanField(default=False)),
                ('cash_payment_confirmed_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(validators=[orders.validators.validate_quantity])),
                ('price_at_time', models.DecimalField(decimal_places=2, max_digits=10, validators=[orders.validators.validate_positive_decimal])),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('method', models.CharField(choices=[('orange_money', 'Orange Money'), ('visa', 'Carte Visa/Mastercard'), ('cash_on_delivery', 'Paiement à la livraison')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'En cours'), ('completed', 'Terminé'), ('failed', 'Échoué'), ('cancelled', 'Annulé')], default='pending', max_length=20)),
                ('orange_money_transaction_id', orders.fields.EncryptedCharField(blank=True, max_length=1600, null=True)),
                ('orange_money_phone', orders.fields.EncryptedPhoneField(blank=True, max_length=320, null=True)),
                ('card_last_four', orders.fields.EncryptedCharField(blank=True, max_length=64, null=True)),
                ('card_brand', orders.fields.EncryptedCharField(blank=True, max_length=320, null=True)),
                ('transaction_id', orders.fields.EncryptedCharField(blank=True, max_length=1600, null=True)),
                ('cash_received', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('cash_change', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Refund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('reason', models.CharField(choices=[('customer_request', 'Demande du client'), ('defective_product', 'Produit défectueux'), ('wrong_item', 'Mauvais article'), ('late_delivery', 'Livraison tardive'), ('order_cancelled', 'Commande annulée'), ('other', 'Autre')], max_length=20)),
                ('reason_description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'En cours'), ('completed', 'Terminé'), ('failed', 'Échoué'), ('cancelled', 'Annulé')], default='pending', max_length=20)),
                ('refund_method', models.CharField(choices=[('orange_money', 'Orange Money'), ('visa', 'Carte Visa/Mastercard'), ('cash_on_delivery', 'Paiement à la livraison')], max_length=20)),
                ('refund_transaction_id', orders.fields.EncryptedCharField(blank=True, max_length=1600, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SecurityEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('event_type', models.CharField(choices=[('failed_login', 'Tentative de connexion échouée'), ('brute_force_attempt', 'Tentative de force brute'), ('suspicious_activity', 'Activité suspecte'), ('unauthorized_access', "Tentative d'accès non autorisé"), ('data_breach_attempt', 'Tentative de violation de données'), ('malicious_request', 'Requête malveillante'), ('rate_limit_exceeded', 'Limite de taux dépassée'), ('ip_blocked', 'IP bloquée'), ('account_locked', 'Compte verrouillé'), ('password_compromise', 'Compromission de mot de passe'), ('session_hijack', 'Tentative de détournement de session'), ('csrf_attack', 'Attaque CSRF'), ('xss_attempt', 'Tentative XSS'), ('sql_injection_attempt', "Tentative d'injection SQL"), ('file_upload_attack', 'Attaque par upload de fichier'), ('other', 'Autre')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Faible'), ('medium', 'Moyen'), ('high', 'Élevé'), ('critical', 'Critique')], default='medium', max_length=10)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('request_path', models.CharField(blank=True, max_length=500, null=True)),
                ('request_method', models.CharField(blank=True, max_length=10, null=True)),
                ('request_data', models.JSONField(blank=True, null=True)),
                ('response_status', models.IntegerField(blank=True, null=True)),
                ('blocked', models.BooleanField(default=False)),
                ('action_taken', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupportMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', orders.fields.EncryptedTextField()),
                ('is_internal', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('subject', orders.fields.EncryptedCharField(max_length=3200)),
                ('description', orders.fields.EncryptedTextField()),
                ('category', models.CharField(choices=[('technical', 'Problème technique'), ('delivery', 'Problème de livraison'), ('product', 'Problème produit'), ('payment', 'Problème de paiement'), ('account', 'Problème de compte'), ('other', 'Autre')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Faible'), ('medium', 'Moyen'), ('high', 'Élevé'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('open', 'Ouvert'), ('in_progress', 'En cours'), ('waiting_customer', 'En attente client'), ('resolved', 'Résolu'), ('closed', 'Fermé')], default='open', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
    ]
